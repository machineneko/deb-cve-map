from flask import Flask, render_template, g, request
import sqlite3
import re

app = Flask(__name__)

@app.get('/cve')
def cve_search():
    g.keyword = request.args.get('search', '')
    table = g.db.execute("""
SELECT 
    cve_id, 
    assigner, 
    strftime('%Y/%m/%d', COALESCE(date_reserved, date_published, date_updated)) AS date, 
    description
FROM cve 
WHERE description LIKE '%' || ? || '%' 
ORDER BY date DESC, cve_id DESC LIMIT 200""", 
        [g.keyword]).fetchall()

    g.table = []

    for row in table:
        if re.search(r'\b' + g.keyword + r'\b', row['description'], re.I):
            g.table.append(row)

    return render_template('cve_search.html')

@app.get('/')
def package_search():
    g.keyword = request.args.get('search', '')
    
    table = g.db.execute("""
SELECT package.*, program_cve_cnt.cve_cnt FROM 
    package
    LEFT JOIN 
    program_cve_cnt 
    ON package.program_name = program_cve_cnt.program_name 
WHERE 
    (package.package_name LIKE '%' || ? || '%') 
    OR 
    (package.description LIKE '%' || ? || '%') 
ORDER BY package_name
LIMIT 200
""", [g.keyword, g.keyword]).fetchall()
    
    g.table = []

    for row in table:
        if g.keyword.lower() in row['package_name'].lower() or re.search(r'\b' + g.keyword + r'\b', row['description'], re.I):
            g.table.append(row)

    return render_template('package_search.html')

@app.get('/random')
def random_package():
    g.table = g.db.execute("""
WITH g AS (SELECT * FROM program_cve_cnt WHERE cve_cnt <= 100),
t AS (SELECT program_name, COUNT(*) as prog_cnt FROM package GROUP BY program_name),
p AS (SELECT g.* FROM g JOIN t ON g.program_name = t.program_name WHERE t.prog_cnt <= 20)
SELECT p.cve_cnt, package.* FROM 
    package
    JOIN 
    p 
    ON p.program_name = package.program_name 
WHERE package.package_name NOT LIKE '%-doc'
ORDER BY RANDOM()
LIMIT 15
""").fetchall()

    return render_template('random_package.html')

@app.before_request
def init_db():
    g.db = sqlite3.connect('info.db')
    g.db.row_factory=sqlite3.Row


@app.teardown_request
def close_db(_):
    g.db.commit()
    g.db.close()

if __name__ == '__main__':
    app.run('0.0.0.0', 5001, debug=True)
