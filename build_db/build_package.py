import string
import sqlite3
import os
import re
from tqdm import tqdm
from ahocorasick import Automaton

def get_program_name(s):
    res = ''
    for c in s:
        if c in string.ascii_letters + string.digits:
            res += c
        else:
            break
    
    while res and res[-1] in string.digits:
        res = res[:-1]

    return res or s

assert get_program_name('v2ray') == 'v2ray'
assert get_program_name('firefox-esr') == 'firefox'
assert get_program_name('libxml2-doc') == 'libxml'

pkgs = os.popen('apt-cache search ^').readlines()
pkgs = [x.strip() for x in pkgs]
pkgs = [x for x in pkgs if x]

db = sqlite3.connect('info.db')
db.execute('DROP TABLE IF EXISTS package')

db.execute('''CREATE TABLE package (
           id SERIAL PRIMARY KEY,
           package_name TEXT NOT NULL,
           program_name TEXT NOT NULL,
           description TEXT NOT NULL
)''')
db.commit()

buffer = []

for info in pkgs:
    pkg_name, pkg_description = info.split(' - ', 1)
    prog_name = get_program_name(pkg_name)
    
    buffer.append([pkg_name, prog_name, pkg_description])

db.executemany(
    'INSERT INTO package(package_name, program_name, description) VALUES (?, ?, ?)',
    buffer)

db.commit()

db.execute('CREATE INDEX idx_package_name on package (package_name)')
db.execute('CREATE INDEX idx_program_name on package (program_name)')

db.commit()

prog_name_list = db.execute('SELECT DISTINCT program_name FROM package').fetchall()
prog_name_list = [x[0].lower() for x in prog_name_list]

A = Automaton()

for idx, word in enumerate(prog_name_list):
    A.add_word(word, word)

A.make_automaton()

cve_description_list = db.execute('SELECT description FROM cve').fetchall()
cve_description_list = [x[0].lower() for x in cve_description_list]

hit_cnt = {x:0 for x in prog_name_list}

for cve_desp in tqdm(cve_description_list):
    matched = set()

    for item in A.iter(cve_desp):
        position, original_word = item
        
        if original_word in matched:
            continue
        
        if re.search(r'\b'+original_word+r'\b', cve_desp, re.I):
            hit_cnt[original_word] += 1
            matched.add(original_word)

db.execute('DROP TABLE IF EXISTS program_cve_cnt')

db.execute('''CREATE TABLE program_cve_cnt (
           program_name TEXT NOT NULL,
           cve_cnt INTEGER NOT NULL
)''')
db.commit()

db.executemany('INSERT INTO program_cve_cnt(program_name, cve_cnt) VALUES (?, ?)', hit_cnt.items())
db.commit()
